name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          # Enable Remote Desktop and disable Network Level Authentication (if needed)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force

          # Remove any existing rule to avoid duplicates
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null

          # Allow incoming RDP (port 3389)
          netsh advfirewall firewall add rule name="RDP-Tailscale" `
            dir=in action=allow protocol=TCP localport=3389 | Out-Null

          # Restart the RDP service to apply changes
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper   = [char[]](65..90)
              Lower   = [char[]](97..122)
              Number  = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })

          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          echo "RDP_USER=RDP" >> $env:GITHUB_ENV
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          Write-Host "Installing Tailscale..."
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          Write-Host "Bringing up Tailscale connection..."
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-${env:GITHUB_RUN_NUMBER}

          # Wait for IP
          $tsIP = $null
          for ($i = 0; $i -lt 10; $i++) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
              if ($tsIP) { break }
              Start-Sleep -Seconds 5
          }

          if (-not $tsIP) {
              Write-Error "‚ùå Tailscale IP not assigned. Please verify your AUTH KEY."
              exit 1
          }

          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "‚úÖ Tailscale connected. IP: $tsIP"

      - name: Debug Tailscale Status
        run: |
          Write-Host "`n=== DEBUG: Tailscale Status ==="
          & "$env:ProgramFiles\Tailscale\tailscale.exe" status
          & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          Write-Host "================================`n"

      - name: Verify RDP Port Accessibility
        run: |
          Write-Host "Testing RDP connection on $env:TAILSCALE_IP..."
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "‚ùå TCP 3389 not reachable via Tailscale!"
              exit 1
          }
          Write-Host "‚úÖ TCP 3389 is reachable!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== ‚úÖ RDP ACCESS READY ==="
          Write-Host "Tailscale IP : $env:TAILSCALE_IP"
          Write-Host "Username     : $env:RDP_USER"
          Write-Host "Password     : $env:RDP_PASS"
          Write-Host "==================================`n"
          Write-Host "üîÑ Keeping connection alive (Press Ctrl+C to stop in workflow)..."

          while ($true) {
              Write-Host "[$(Get-Date)] RDP session active."
              Start-Sleep -Seconds 300
          }
